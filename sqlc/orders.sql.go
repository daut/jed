// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (first_name, last_name, email, phone, address, city)
VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, first_name, last_name, email, phone, address, city, created_at
`

type CreateOrderParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	Address   string `json:"address"`
	City      string `json:"city"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.City,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderProduct = `-- name: CreateOrderProduct :many
INSERT INTO order_product (order_id, product_id, quantity)
VALUES (
  $1, $2, $3
)
RETURNING order_id, product_id, quantity
`

type CreateOrderProductParams struct {
	OrderID   int32 `json:"order_id"`
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) ([]OrderProduct, error) {
	rows, err := q.db.Query(ctx, createOrderProduct, arg.OrderID, arg.ProductID, arg.Quantity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderProduct
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
